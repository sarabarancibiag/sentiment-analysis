{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "59e929cf",
   "metadata": {},
   "source": [
    "In this notebook, we're going to reproduce \"Trump Sounds a Different Tone in First Address to Congress\" from The UpShot published in Feb 2017\n",
    "\n",
    "Data source 1: The NRC Emotional Lexicon, a list of English words and their associations with eight basic emotions (anger, fear, anticipation, trust, surprise, sadness, joy, and disgust) and two sentiments (negative and positive). The annotations were manually done by crowdsourcing.\n",
    "\n",
    "Data source 2: A database of Trump speeches, one speech per file. There are a lot of GitHub repositories of Trump speeches, but at the time this analysis was performed that was the best.\n",
    "\n",
    "Data source 3: State of the Union addresses taken from this repo's data directory. I also cheated and pasted Trump's SOTU-y address in."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5bbc9804",
   "metadata": {},
   "source": [
    "## Let's import Emotion Lexicon"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5e919743",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "55b6652b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>word</th>\n",
       "      <th>emotion</th>\n",
       "      <th>association</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>abandonment</td>\n",
       "      <td>negative</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>abandonment</td>\n",
       "      <td>positive</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>abandonment</td>\n",
       "      <td>sadness</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>abandonment</td>\n",
       "      <td>surprise</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>abandonment</td>\n",
       "      <td>trust</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          word   emotion  association\n",
       "0  abandonment  negative            1\n",
       "1  abandonment  positive            0\n",
       "2  abandonment   sadness            1\n",
       "3  abandonment  surprise            1\n",
       "4  abandonment     trust            0"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filepath = \"data/NRC-emotion-lexicon-wordlevel-alphabetized-v0.92.txt\"\n",
    "\n",
    "emolex_df=pd.read_csv(filepath, names=[\"word\",\"emotion\",\"association\"], skiprows=45, sep='\\t', keep_default_na=False)\n",
    "\n",
    "emolex_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17ea9f27",
   "metadata": {},
   "source": [
    "### How many emotions do we have?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c82e6bf2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['negative', 'positive', 'sadness', 'surprise', 'trust', 'anger',\n",
       "       'anticipation', 'disgust', 'fear', 'joy'], dtype=object)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "emolex_df.emotion.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "5af46869",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "negative        14178\n",
       "positive        14178\n",
       "sadness         14178\n",
       "surprise        14178\n",
       "trust           14178\n",
       "anger           14177\n",
       "anticipation    14177\n",
       "disgust         14177\n",
       "fear            14177\n",
       "joy             14177\n",
       "Name: emotion, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "emolex_df.emotion.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ba92f11",
   "metadata": {},
   "source": [
    "We will only stay with the associated emotions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "45d2859f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "negative        3322\n",
       "positive        2312\n",
       "fear            1473\n",
       "anger           1245\n",
       "trust           1230\n",
       "sadness         1189\n",
       "disgust         1058\n",
       "anticipation     839\n",
       "joy              689\n",
       "surprise         534\n",
       "Name: emotion, dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "emolex_df[emolex_df.association == 1].emotion.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b683fd65",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "anger    1245\n",
       "Name: emotion, dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "emolex_df[(emolex_df.association == 1) & (emolex_df.emotion == \"anger\")].emotion.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b06cac08",
   "metadata": {},
   "outputs": [],
   "source": [
    "emolex_words = emolex_df.pivot(index='word', columns='emotion', values='association').reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "878ee524",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>emotion</th>\n",
       "      <th>word</th>\n",
       "      <th>anger</th>\n",
       "      <th>anticipation</th>\n",
       "      <th>disgust</th>\n",
       "      <th>fear</th>\n",
       "      <th>joy</th>\n",
       "      <th>negative</th>\n",
       "      <th>positive</th>\n",
       "      <th>sadness</th>\n",
       "      <th>surprise</th>\n",
       "      <th>trust</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>abandonment</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>abate</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>abatement</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>abba</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>abbot</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "emotion         word  anger  anticipation  disgust  fear  joy  negative  \\\n",
       "0        abandonment    NaN           NaN      NaN   NaN  NaN       1.0   \n",
       "1              abate    0.0           0.0      0.0   0.0  0.0       0.0   \n",
       "2          abatement    0.0           0.0      0.0   0.0  0.0       0.0   \n",
       "3               abba    0.0           0.0      0.0   0.0  0.0       0.0   \n",
       "4              abbot    0.0           0.0      0.0   0.0  0.0       0.0   \n",
       "\n",
       "emotion  positive  sadness  surprise  trust  \n",
       "0             0.0      1.0       1.0    0.0  \n",
       "1             0.0      0.0       0.0    0.0  \n",
       "2             0.0      0.0       0.0    0.0  \n",
       "3             1.0      0.0       0.0    0.0  \n",
       "4             0.0      0.0       0.0    1.0  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "emolex_words.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c645520b",
   "metadata": {},
   "source": [
    "## Now, we can bring our data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "bf56b470",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "929209f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import glob"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "d923c64c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['data/trump_speeches-master/data/speech_41.txt',\n",
       " 'data/trump_speeches-master/data/speech_55.txt',\n",
       " 'data/trump_speeches-master/data/speech_69.txt',\n",
       " 'data/trump_speeches-master/data/speech_68.txt',\n",
       " 'data/trump_speeches-master/data/speech_54.txt']"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filenames = glob.glob(\"data/trump_speeches-master/data/speech*\")\n",
    "filenames[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "a4ec9e92",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "74"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "speeches = [open(filename).read() for filename in filenames]\n",
    "len(speeches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "57b55511",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>filename</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Remarks at a Rally at the Mid-America Center i...</td>\n",
       "      <td>data/trump_speeches-master/data/speech_41.txt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Remarks at Toyota of Portsmouth in Portsmouth,...</td>\n",
       "      <td>data/trump_speeches-master/data/speech_55.txt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Remarks on Obamacare in Valley Forge, Pennsylv...</td>\n",
       "      <td>data/trump_speeches-master/data/speech_69.txt</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                text  \\\n",
       "0  Remarks at a Rally at the Mid-America Center i...   \n",
       "1  Remarks at Toyota of Portsmouth in Portsmouth,...   \n",
       "2  Remarks on Obamacare in Valley Forge, Pennsylv...   \n",
       "\n",
       "                                        filename  \n",
       "0  data/trump_speeches-master/data/speech_41.txt  \n",
       "1  data/trump_speeches-master/data/speech_55.txt  \n",
       "2  data/trump_speeches-master/data/speech_69.txt  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "speeches_df = pd.DataFrame({\n",
    "    'text':speeches,\n",
    "    'filename':filenames\n",
    "})\n",
    "speeches_df.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "ca36db5f",
   "metadata": {},
   "outputs": [],
   "source": [
    "speeches_df['name'] = speeches_df['text'].apply(lambda value: value.split(\"\\n\")[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "127f9a2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "speeches_df['content'] = speeches_df['text'].apply(lambda value: value.split(\"\\n\")[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "e4138cd2",
   "metadata": {},
   "outputs": [],
   "source": [
    "del speeches_df['text']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "2d876bfb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>filename</th>\n",
       "      <th>name</th>\n",
       "      <th>content</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>data/trump_speeches-master/data/speech_41.txt</td>\n",
       "      <td>Remarks at a Rally at the Mid-America Center i...</td>\n",
       "      <td>Thank you. I always look forward to coming bac...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>data/trump_speeches-master/data/speech_55.txt</td>\n",
       "      <td>Remarks at Toyota of Portsmouth in Portsmouth,...</td>\n",
       "      <td>Thank you. In 24 days, we are going to win the...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                        filename  \\\n",
       "0  data/trump_speeches-master/data/speech_41.txt   \n",
       "1  data/trump_speeches-master/data/speech_55.txt   \n",
       "\n",
       "                                                name  \\\n",
       "0  Remarks at a Rally at the Mid-America Center i...   \n",
       "1  Remarks at Toyota of Portsmouth in Portsmouth,...   \n",
       "\n",
       "                                             content  \n",
       "0  Thank you. I always look forward to coming bac...  \n",
       "1  Thank you. In 24 days, we are going to win the...  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "speeches_df.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "c942d6ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "16215117",
   "metadata": {},
   "outputs": [],
   "source": [
    "vec = CountVectorizer(vocabulary=emolex_words)\n",
    "matrix = vec.fit_transform(speeches_df['content'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "85e70064",
   "metadata": {},
   "outputs": [],
   "source": [
    "vocab = vec.get_feature_names_out()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "c62636ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>word</th>\n",
       "      <th>anger</th>\n",
       "      <th>anticipation</th>\n",
       "      <th>disgust</th>\n",
       "      <th>fear</th>\n",
       "      <th>joy</th>\n",
       "      <th>negative</th>\n",
       "      <th>positive</th>\n",
       "      <th>sadness</th>\n",
       "      <th>surprise</th>\n",
       "      <th>trust</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   word  anger  anticipation  disgust  fear  joy  negative  positive  sadness  \\\n",
       "0     0      0             0        0     0    0         0         0        0   \n",
       "1     0      0             0        0     0    0         0         0        0   \n",
       "2     1      0             0        0     0    0         0         0        0   \n",
       "3     0      0             0        0     0    0         0         0        0   \n",
       "4     0      0             0        0     0    0         0         0        0   \n",
       "\n",
       "   surprise  trust  \n",
       "0         0      0  \n",
       "1         0      0  \n",
       "2         0      0  \n",
       "3         0      0  \n",
       "4         0      0  "
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wordcount_df = pd.DataFrame(matrix.toarray(), columns=vocab)\n",
    "wordcount_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "f2ca44fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    abandonment\n",
       "1    abandonment\n",
       "2    abandonment\n",
       "Name: word, dtype: object"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "emolex_df.word.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "af0e880e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "9f8e7daf",
   "metadata": {},
   "outputs": [],
   "source": [
    "unique_vocabulary = emolex_df.word.drop_duplicates()\n",
    "\n",
    "\n",
    "vec = TfidfVectorizer(vocabulary=unique_vocabulary,\n",
    "                      use_idf=False, \n",
    "                      norm='l1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "011767c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "matrix = vec.fit_transform(speeches_df.content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "b7ff7733",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>abandonment</th>\n",
       "      <th>abate</th>\n",
       "      <th>abatement</th>\n",
       "      <th>abba</th>\n",
       "      <th>abbot</th>\n",
       "      <th>abbreviate</th>\n",
       "      <th>abbreviation</th>\n",
       "      <th>abdomen</th>\n",
       "      <th>abdominal</th>\n",
       "      <th>abduction</th>\n",
       "      <th>...</th>\n",
       "      <th>zephyr</th>\n",
       "      <th>zeppelin</th>\n",
       "      <th>zest</th>\n",
       "      <th>zip</th>\n",
       "      <th>zodiac</th>\n",
       "      <th>zone</th>\n",
       "      <th>zoo</th>\n",
       "      <th>zoological</th>\n",
       "      <th>zoology</th>\n",
       "      <th>zoom</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 14178 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   abandonment  abate  abatement  abba  abbot  abbreviate  abbreviation  \\\n",
       "0          0.0    0.0        0.0   0.0    0.0         0.0           0.0   \n",
       "1          0.0    0.0        0.0   0.0    0.0         0.0           0.0   \n",
       "2          0.0    0.0        0.0   0.0    0.0         0.0           0.0   \n",
       "3          0.0    0.0        0.0   0.0    0.0         0.0           0.0   \n",
       "4          0.0    0.0        0.0   0.0    0.0         0.0           0.0   \n",
       "\n",
       "   abdomen  abdominal  abduction  ...  zephyr  zeppelin  zest  zip  zodiac  \\\n",
       "0      0.0        0.0        0.0  ...     0.0       0.0   0.0  0.0     0.0   \n",
       "1      0.0        0.0        0.0  ...     0.0       0.0   0.0  0.0     0.0   \n",
       "2      0.0        0.0        0.0  ...     0.0       0.0   0.0  0.0     0.0   \n",
       "3      0.0        0.0        0.0  ...     0.0       0.0   0.0  0.0     0.0   \n",
       "4      0.0        0.0        0.0  ...     0.0       0.0   0.0  0.0     0.0   \n",
       "\n",
       "   zone  zoo  zoological  zoology  zoom  \n",
       "0   0.0  0.0         0.0      0.0   0.0  \n",
       "1   0.0  0.0         0.0      0.0   0.0  \n",
       "2   0.0  0.0         0.0      0.0   0.0  \n",
       "3   0.0  0.0         0.0      0.0   0.0  \n",
       "4   0.0  0.0         0.0      0.0   0.0  \n",
       "\n",
       "[5 rows x 14178 columns]"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vocab = vec.get_feature_names_out()\n",
    "wordcount_df = pd.DataFrame(matrix.toarray(), columns=vocab)\n",
    "wordcount_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76afe661",
   "metadata": {},
   "source": [
    "## Analysis with the EmoLex"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "0cdb9fc3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>emotion</th>\n",
       "      <th>word</th>\n",
       "      <th>anger</th>\n",
       "      <th>anticipation</th>\n",
       "      <th>disgust</th>\n",
       "      <th>fear</th>\n",
       "      <th>joy</th>\n",
       "      <th>negative</th>\n",
       "      <th>positive</th>\n",
       "      <th>sadness</th>\n",
       "      <th>surprise</th>\n",
       "      <th>trust</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>abandonment</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>abate</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>abatement</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>abba</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>abbot</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "emotion         word  anger  anticipation  disgust  fear  joy  negative  \\\n",
       "0        abandonment    NaN           NaN      NaN   NaN  NaN       1.0   \n",
       "1              abate    0.0           0.0      0.0   0.0  0.0       0.0   \n",
       "2          abatement    0.0           0.0      0.0   0.0  0.0       0.0   \n",
       "3               abba    0.0           0.0      0.0   0.0  0.0       0.0   \n",
       "4              abbot    0.0           0.0      0.0   0.0  0.0       0.0   \n",
       "\n",
       "emotion  positive  sadness  surprise  trust  \n",
       "0             0.0      1.0       1.0    0.0  \n",
       "1             0.0      0.0       0.0    0.0  \n",
       "2             0.0      0.0       0.0    0.0  \n",
       "3             1.0      0.0       0.0    0.0  \n",
       "4             0.0      0.0       0.0    1.0  "
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "emolex_words.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "0cf67b89",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>emotion</th>\n",
       "      <th>word</th>\n",
       "      <th>anger</th>\n",
       "      <th>anticipation</th>\n",
       "      <th>disgust</th>\n",
       "      <th>fear</th>\n",
       "      <th>joy</th>\n",
       "      <th>negative</th>\n",
       "      <th>positive</th>\n",
       "      <th>sadness</th>\n",
       "      <th>surprise</th>\n",
       "      <th>trust</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>abhor</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>abhorrent</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>abolish</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>abomination</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>abuse</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "emotion         word  anger  anticipation  disgust  fear  joy  negative  \\\n",
       "13             abhor    1.0           0.0      1.0   1.0  0.0       1.0   \n",
       "14         abhorrent    1.0           0.0      1.0   1.0  0.0       1.0   \n",
       "23           abolish    1.0           0.0      0.0   0.0  0.0       1.0   \n",
       "26       abomination    1.0           0.0      1.0   1.0  0.0       1.0   \n",
       "59             abuse    1.0           0.0      1.0   1.0  0.0       1.0   \n",
       "\n",
       "emotion  positive  sadness  surprise  trust  \n",
       "13            0.0      0.0       0.0    0.0  \n",
       "14            0.0      0.0       0.0    0.0  \n",
       "23            0.0      0.0       0.0    0.0  \n",
       "26            0.0      0.0       0.0    0.0  \n",
       "59            0.0      1.0       0.0    0.0  "
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "emolex_words[emolex_words.anger == 1].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "56ed5adf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "13          abhor\n",
       "14      abhorrent\n",
       "23        abolish\n",
       "26    abomination\n",
       "59          abuse\n",
       "Name: word, dtype: object"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get list of angry words\n",
    "\n",
    "angry_words = emolex_words[emolex_words.anger == 1]['word']\n",
    "angry_words.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "90f843ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>abhor</th>\n",
       "      <th>abhorrent</th>\n",
       "      <th>abolish</th>\n",
       "      <th>abomination</th>\n",
       "      <th>abuse</th>\n",
       "      <th>accursed</th>\n",
       "      <th>accusation</th>\n",
       "      <th>accused</th>\n",
       "      <th>accuser</th>\n",
       "      <th>accusing</th>\n",
       "      <th>...</th>\n",
       "      <th>wreck</th>\n",
       "      <th>wrecked</th>\n",
       "      <th>wretch</th>\n",
       "      <th>wring</th>\n",
       "      <th>wrongdoing</th>\n",
       "      <th>wrongful</th>\n",
       "      <th>wrongly</th>\n",
       "      <th>yell</th>\n",
       "      <th>yelp</th>\n",
       "      <th>youth</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.002188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.003597</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.001799</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 1245 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   abhor  abhorrent  abolish  abomination     abuse  accursed  accusation  \\\n",
       "0    0.0        0.0      0.0          0.0  0.000000       0.0         0.0   \n",
       "1    0.0        0.0      0.0          0.0  0.000000       0.0         0.0   \n",
       "2    0.0        0.0      0.0          0.0  0.000000       0.0         0.0   \n",
       "3    0.0        0.0      0.0          0.0  0.000000       0.0         0.0   \n",
       "4    0.0        0.0      0.0          0.0  0.003597       0.0         0.0   \n",
       "\n",
       "   accused  accuser  accusing  ...  wreck  wrecked  wretch  wring  wrongdoing  \\\n",
       "0      0.0      0.0       0.0  ...    0.0      0.0     0.0    0.0         0.0   \n",
       "1      0.0      0.0       0.0  ...    0.0      0.0     0.0    0.0         0.0   \n",
       "2      0.0      0.0       0.0  ...    0.0      0.0     0.0    0.0         0.0   \n",
       "3      0.0      0.0       0.0  ...    0.0      0.0     0.0    0.0         0.0   \n",
       "4      0.0      0.0       0.0  ...    0.0      0.0     0.0    0.0         0.0   \n",
       "\n",
       "   wrongful  wrongly  yell  yelp     youth  \n",
       "0       0.0      0.0   0.0   0.0  0.000000  \n",
       "1       0.0      0.0   0.0   0.0  0.002188  \n",
       "2       0.0      0.0   0.0   0.0  0.000000  \n",
       "3       0.0      0.0   0.0   0.0  0.000000  \n",
       "4       0.0      0.0   0.0   0.0  0.001799  \n",
       "\n",
       "[5 rows x 1245 columns]"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wordcount_df[angry_words].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "4d00d62b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>filename</th>\n",
       "      <th>name</th>\n",
       "      <th>content</th>\n",
       "      <th>anger</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>data/trump_speeches-master/data/speech_41.txt</td>\n",
       "      <td>Remarks at a Rally at the Mid-America Center i...</td>\n",
       "      <td>Thank you. I always look forward to coming bac...</td>\n",
       "      <td>0.093946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>data/trump_speeches-master/data/speech_55.txt</td>\n",
       "      <td>Remarks at Toyota of Portsmouth in Portsmouth,...</td>\n",
       "      <td>Thank you. In 24 days, we are going to win the...</td>\n",
       "      <td>0.091904</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>data/trump_speeches-master/data/speech_69.txt</td>\n",
       "      <td>Remarks on Obamacare in Valley Forge, Pennsylv...</td>\n",
       "      <td>Thank you very much. Thank you. [applause] I w...</td>\n",
       "      <td>0.033841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>data/trump_speeches-master/data/speech_68.txt</td>\n",
       "      <td>Remarks at Macomb Community College South Camp...</td>\n",
       "      <td>In 8 days, we are going to win the Great State...</td>\n",
       "      <td>0.104425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>data/trump_speeches-master/data/speech_54.txt</td>\n",
       "      <td>Remarks at the Cross Insurance Center in Bango...</td>\n",
       "      <td>Thank you. In 24 days, we are going to win thi...</td>\n",
       "      <td>0.077338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>data/trump_speeches-master/data/speech_40.txt</td>\n",
       "      <td>Remarks at a Rally at Berglund Center in Roano...</td>\n",
       "      <td>Thank you. It's wonderful to be here in Virgin...</td>\n",
       "      <td>0.089888</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>data/trump_speeches-master/data/speech_56.txt</td>\n",
       "      <td>Remarks at the KI Convention Center in Green B...</td>\n",
       "      <td>Thank you. In 22 days, we are going to win the...</td>\n",
       "      <td>0.094444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>data/trump_speeches-master/data/speech_42.txt</td>\n",
       "      <td>Remarks at a Rally at Waukesha County Expo Cen...</td>\n",
       "      <td>Thank you. It's so great to be in Wisconsin to...</td>\n",
       "      <td>0.112450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>data/trump_speeches-master/data/speech_43.txt</td>\n",
       "      <td>Remarks at a Rally at the New Hampshire Sports...</td>\n",
       "      <td>Thank you. It is always so great to be back in...</td>\n",
       "      <td>0.090508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>data/trump_speeches-master/data/speech_57.txt</td>\n",
       "      <td>Remarks at the Norris-Penrose Event Center in ...</td>\n",
       "      <td>In 21 days, we are going to win the state of C...</td>\n",
       "      <td>0.111399</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                        filename  \\\n",
       "0  data/trump_speeches-master/data/speech_41.txt   \n",
       "1  data/trump_speeches-master/data/speech_55.txt   \n",
       "2  data/trump_speeches-master/data/speech_69.txt   \n",
       "3  data/trump_speeches-master/data/speech_68.txt   \n",
       "4  data/trump_speeches-master/data/speech_54.txt   \n",
       "5  data/trump_speeches-master/data/speech_40.txt   \n",
       "6  data/trump_speeches-master/data/speech_56.txt   \n",
       "7  data/trump_speeches-master/data/speech_42.txt   \n",
       "8  data/trump_speeches-master/data/speech_43.txt   \n",
       "9  data/trump_speeches-master/data/speech_57.txt   \n",
       "\n",
       "                                                name  \\\n",
       "0  Remarks at a Rally at the Mid-America Center i...   \n",
       "1  Remarks at Toyota of Portsmouth in Portsmouth,...   \n",
       "2  Remarks on Obamacare in Valley Forge, Pennsylv...   \n",
       "3  Remarks at Macomb Community College South Camp...   \n",
       "4  Remarks at the Cross Insurance Center in Bango...   \n",
       "5  Remarks at a Rally at Berglund Center in Roano...   \n",
       "6  Remarks at the KI Convention Center in Green B...   \n",
       "7  Remarks at a Rally at Waukesha County Expo Cen...   \n",
       "8  Remarks at a Rally at the New Hampshire Sports...   \n",
       "9  Remarks at the Norris-Penrose Event Center in ...   \n",
       "\n",
       "                                             content     anger  \n",
       "0  Thank you. I always look forward to coming bac...  0.093946  \n",
       "1  Thank you. In 24 days, we are going to win the...  0.091904  \n",
       "2  Thank you very much. Thank you. [applause] I w...  0.033841  \n",
       "3  In 8 days, we are going to win the Great State...  0.104425  \n",
       "4  Thank you. In 24 days, we are going to win thi...  0.077338  \n",
       "5  Thank you. It's wonderful to be here in Virgin...  0.089888  \n",
       "6  Thank you. In 22 days, we are going to win the...  0.094444  \n",
       "7  Thank you. It's so great to be in Wisconsin to...  0.112450  \n",
       "8  Thank you. It is always so great to be back in...  0.090508  \n",
       "9  In 21 days, we are going to win the state of C...  0.111399  "
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Only give me the columns of angry words\n",
    "\n",
    "speeches_df['anger'] = wordcount_df[angry_words].sum(axis=1)\n",
    "speeches_df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "2124a2ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>filename</th>\n",
       "      <th>name</th>\n",
       "      <th>content</th>\n",
       "      <th>anger</th>\n",
       "      <th>positivity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>data/trump_speeches-master/data/speech_41.txt</td>\n",
       "      <td>Remarks at a Rally at the Mid-America Center i...</td>\n",
       "      <td>Thank you. I always look forward to coming bac...</td>\n",
       "      <td>0.093946</td>\n",
       "      <td>0.206681</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>data/trump_speeches-master/data/speech_55.txt</td>\n",
       "      <td>Remarks at Toyota of Portsmouth in Portsmouth,...</td>\n",
       "      <td>Thank you. In 24 days, we are going to win the...</td>\n",
       "      <td>0.091904</td>\n",
       "      <td>0.194748</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>data/trump_speeches-master/data/speech_69.txt</td>\n",
       "      <td>Remarks on Obamacare in Valley Forge, Pennsylv...</td>\n",
       "      <td>Thank you very much. Thank you. [applause] I w...</td>\n",
       "      <td>0.033841</td>\n",
       "      <td>0.287648</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                        filename  \\\n",
       "0  data/trump_speeches-master/data/speech_41.txt   \n",
       "1  data/trump_speeches-master/data/speech_55.txt   \n",
       "2  data/trump_speeches-master/data/speech_69.txt   \n",
       "\n",
       "                                                name  \\\n",
       "0  Remarks at a Rally at the Mid-America Center i...   \n",
       "1  Remarks at Toyota of Portsmouth in Portsmouth,...   \n",
       "2  Remarks on Obamacare in Valley Forge, Pennsylv...   \n",
       "\n",
       "                                             content     anger  positivity  \n",
       "0  Thank you. I always look forward to coming bac...  0.093946    0.206681  \n",
       "1  Thank you. In 24 days, we are going to win the...  0.091904    0.194748  \n",
       "2  Thank you very much. Thank you. [applause] I w...  0.033841    0.287648  "
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Now let's do the same for positive words\n",
    "\n",
    "positive_words = emolex_words[emolex_words.positive == 1].word\n",
    "\n",
    "speeches_df['positivity'] = wordcount_df[positive_words].sum(axis=1)\n",
    "speeches_df.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6a2c0f4",
   "metadata": {},
   "source": [
    "## Plot our results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "4d9b3707",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='positivity', ylabel='anger'>"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "speeches_df.plot(x= 'positivity' , y='anger', kind='scatter')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0a46c84",
   "metadata": {},
   "source": [
    "## Reading in the SOTU addresses"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "0c98cdc3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>content</th>\n",
       "      <th>filename</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Thank you very much. Mr. Speaker, Vice Preside...</td>\n",
       "      <td>data/SOTU-Analyzer-master/Speeches/2002.txt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Thank you. Mr. Speaker, Mr. Vice President, Me...</td>\n",
       "      <td>data/SOTU-Analyzer-master/Speeches/2016.txt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mr. Speaker, Vice President Cheney, Members of...</td>\n",
       "      <td>data/SOTU-Analyzer-master/Speeches/2003.txt</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             content  \\\n",
       "0  Thank you very much. Mr. Speaker, Vice Preside...   \n",
       "1  Thank you. Mr. Speaker, Mr. Vice President, Me...   \n",
       "2  Mr. Speaker, Vice President Cheney, Members of...   \n",
       "\n",
       "                                      filename  \n",
       "0  data/SOTU-Analyzer-master/Speeches/2002.txt  \n",
       "1  data/SOTU-Analyzer-master/Speeches/2016.txt  \n",
       "2  data/SOTU-Analyzer-master/Speeches/2003.txt  "
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get the filenames\n",
    "# Read them in\n",
    "# Create a dataframe from the results\n",
    "filenames = glob.glob(\"data/SOTU-Analyzer-master/Speeches/*.txt\")\n",
    "\n",
    "contents = [open(filename).read() for filename in filenames]\n",
    "sotu_df = pd.DataFrame({\n",
    "    'content': contents,\n",
    "    'filename': filenames\n",
    "})\n",
    "sotu_df.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "83979607",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>content</th>\n",
       "      <th>filename</th>\n",
       "      <th>name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Thank you very much. Mr. Speaker, Vice Preside...</td>\n",
       "      <td>data/SOTU-Analyzer-master/Speeches/2002.txt</td>\n",
       "      <td>data/SOTU-Analyzer-master/Speeches/2002.txt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Thank you. Mr. Speaker, Mr. Vice President, Me...</td>\n",
       "      <td>data/SOTU-Analyzer-master/Speeches/2016.txt</td>\n",
       "      <td>data/SOTU-Analyzer-master/Speeches/2016.txt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mr. Speaker, Vice President Cheney, Members of...</td>\n",
       "      <td>data/SOTU-Analyzer-master/Speeches/2003.txt</td>\n",
       "      <td>data/SOTU-Analyzer-master/Speeches/2003.txt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Gentlemen of the Congress:\\n\\nIn pursuance of ...</td>\n",
       "      <td>data/SOTU-Analyzer-master/Speeches/1913.txt</td>\n",
       "      <td>data/SOTU-Analyzer-master/Speeches/1913.txt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Mr. Vice President, Mr. Speaker, Members of th...</td>\n",
       "      <td>data/SOTU-Analyzer-master/Speeches/1939.txt</td>\n",
       "      <td>data/SOTU-Analyzer-master/Speeches/1939.txt</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             content  \\\n",
       "0  Thank you very much. Mr. Speaker, Vice Preside...   \n",
       "1  Thank you. Mr. Speaker, Mr. Vice President, Me...   \n",
       "2  Mr. Speaker, Vice President Cheney, Members of...   \n",
       "3  Gentlemen of the Congress:\\n\\nIn pursuance of ...   \n",
       "4  Mr. Vice President, Mr. Speaker, Members of th...   \n",
       "\n",
       "                                      filename  \\\n",
       "0  data/SOTU-Analyzer-master/Speeches/2002.txt   \n",
       "1  data/SOTU-Analyzer-master/Speeches/2016.txt   \n",
       "2  data/SOTU-Analyzer-master/Speeches/2003.txt   \n",
       "3  data/SOTU-Analyzer-master/Speeches/1913.txt   \n",
       "4  data/SOTU-Analyzer-master/Speeches/1939.txt   \n",
       "\n",
       "                                          name  \n",
       "0  data/SOTU-Analyzer-master/Speeches/2002.txt  \n",
       "1  data/SOTU-Analyzer-master/Speeches/2016.txt  \n",
       "2  data/SOTU-Analyzer-master/Speeches/2003.txt  \n",
       "3  data/SOTU-Analyzer-master/Speeches/1913.txt  \n",
       "4  data/SOTU-Analyzer-master/Speeches/1939.txt  "
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sotu_df['name'] = sotu_df['filename']\n",
    "sotu_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99972a02",
   "metadata": {},
   "source": [
    "## How do State of the Unions sound?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "0ce7f067",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>abandonment</th>\n",
       "      <th>abate</th>\n",
       "      <th>abatement</th>\n",
       "      <th>abba</th>\n",
       "      <th>abbot</th>\n",
       "      <th>abbreviate</th>\n",
       "      <th>abbreviation</th>\n",
       "      <th>abdomen</th>\n",
       "      <th>abdominal</th>\n",
       "      <th>abduction</th>\n",
       "      <th>...</th>\n",
       "      <th>zephyr</th>\n",
       "      <th>zeppelin</th>\n",
       "      <th>zest</th>\n",
       "      <th>zip</th>\n",
       "      <th>zodiac</th>\n",
       "      <th>zone</th>\n",
       "      <th>zoo</th>\n",
       "      <th>zoological</th>\n",
       "      <th>zoology</th>\n",
       "      <th>zoom</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.001107</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 14178 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   abandonment  abate  abatement  abba  abbot  abbreviate  abbreviation  \\\n",
       "0          0.0    0.0        0.0   0.0    0.0         0.0      0.000000   \n",
       "1          0.0    0.0        0.0   0.0    0.0         0.0      0.000000   \n",
       "2          0.0    0.0        0.0   0.0    0.0         0.0      0.000000   \n",
       "3          0.0    0.0        0.0   0.0    0.0         0.0      0.001107   \n",
       "4          0.0    0.0        0.0   0.0    0.0         0.0      0.000000   \n",
       "\n",
       "   abdomen  abdominal  abduction  ...  zephyr  zeppelin  zest  zip  zodiac  \\\n",
       "0      0.0        0.0        0.0  ...     0.0       0.0   0.0  0.0     0.0   \n",
       "1      0.0        0.0        0.0  ...     0.0       0.0   0.0  0.0     0.0   \n",
       "2      0.0        0.0        0.0  ...     0.0       0.0   0.0  0.0     0.0   \n",
       "3      0.0        0.0        0.0  ...     0.0       0.0   0.0  0.0     0.0   \n",
       "4      0.0        0.0        0.0  ...     0.0       0.0   0.0  0.0     0.0   \n",
       "\n",
       "   zone  zoo  zoological  zoology  zoom  \n",
       "0   0.0  0.0         0.0      0.0   0.0  \n",
       "1   0.0  0.0         0.0      0.0   0.0  \n",
       "2   0.0  0.0         0.0      0.0   0.0  \n",
       "3   0.0  0.0         0.0      0.0   0.0  \n",
       "4   0.0  0.0         0.0      0.0   0.0  \n",
       "\n",
       "[5 rows x 14178 columns]"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "\n",
    "# I only want you to look for words in the emotional lexicon\n",
    "# because we don't know what's up with the other words\n",
    "\n",
    "vec = TfidfVectorizer(vocabulary=emolex_df.word.drop_duplicates(),\n",
    "                      use_idf=False, \n",
    "                      norm='l1') # ELL - ONE\n",
    "matrix = vec.fit_transform(sotu_df['content'])\n",
    "vocab = vec.get_feature_names_out()\n",
    "sotu_wordcount_df = pd.DataFrame(matrix.toarray(), columns=vocab)\n",
    "sotu_wordcount_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a28a070b",
   "metadata": {},
   "source": [
    "## Sum up anger and positivity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "67d5a4ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>content</th>\n",
       "      <th>filename</th>\n",
       "      <th>name</th>\n",
       "      <th>positivity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Thank you very much. Mr. Speaker, Vice Preside...</td>\n",
       "      <td>data/SOTU-Analyzer-master/Speeches/2002.txt</td>\n",
       "      <td>data/SOTU-Analyzer-master/Speeches/2002.txt</td>\n",
       "      <td>0.298395</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Thank you. Mr. Speaker, Mr. Vice President, Me...</td>\n",
       "      <td>data/SOTU-Analyzer-master/Speeches/2016.txt</td>\n",
       "      <td>data/SOTU-Analyzer-master/Speeches/2016.txt</td>\n",
       "      <td>0.274342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mr. Speaker, Vice President Cheney, Members of...</td>\n",
       "      <td>data/SOTU-Analyzer-master/Speeches/2003.txt</td>\n",
       "      <td>data/SOTU-Analyzer-master/Speeches/2003.txt</td>\n",
       "      <td>0.258042</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             content  \\\n",
       "0  Thank you very much. Mr. Speaker, Vice Preside...   \n",
       "1  Thank you. Mr. Speaker, Mr. Vice President, Me...   \n",
       "2  Mr. Speaker, Vice President Cheney, Members of...   \n",
       "\n",
       "                                      filename  \\\n",
       "0  data/SOTU-Analyzer-master/Speeches/2002.txt   \n",
       "1  data/SOTU-Analyzer-master/Speeches/2016.txt   \n",
       "2  data/SOTU-Analyzer-master/Speeches/2003.txt   \n",
       "\n",
       "                                          name  positivity  \n",
       "0  data/SOTU-Analyzer-master/Speeches/2002.txt    0.298395  \n",
       "1  data/SOTU-Analyzer-master/Speeches/2016.txt    0.274342  \n",
       "2  data/SOTU-Analyzer-master/Speeches/2003.txt    0.258042  "
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get your list of positive words\n",
    "positive_words = emolex_words[emolex_words.positive == 1]['word']\n",
    "\n",
    "# Only give me the columns of angry words\n",
    "sotu_df['positivity'] = sotu_wordcount_df[positive_words].sum(axis=1)\n",
    "sotu_df.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "b9e62a04",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>content</th>\n",
       "      <th>filename</th>\n",
       "      <th>name</th>\n",
       "      <th>positivity</th>\n",
       "      <th>anger</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Thank you very much. Mr. Speaker, Vice Preside...</td>\n",
       "      <td>data/SOTU-Analyzer-master/Speeches/2002.txt</td>\n",
       "      <td>data/SOTU-Analyzer-master/Speeches/2002.txt</td>\n",
       "      <td>0.298395</td>\n",
       "      <td>0.07932</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Thank you. Mr. Speaker, Mr. Vice President, Me...</td>\n",
       "      <td>data/SOTU-Analyzer-master/Speeches/2016.txt</td>\n",
       "      <td>data/SOTU-Analyzer-master/Speeches/2016.txt</td>\n",
       "      <td>0.274342</td>\n",
       "      <td>0.07500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mr. Speaker, Vice President Cheney, Members of...</td>\n",
       "      <td>data/SOTU-Analyzer-master/Speeches/2003.txt</td>\n",
       "      <td>data/SOTU-Analyzer-master/Speeches/2003.txt</td>\n",
       "      <td>0.258042</td>\n",
       "      <td>0.09514</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             content  \\\n",
       "0  Thank you very much. Mr. Speaker, Vice Preside...   \n",
       "1  Thank you. Mr. Speaker, Mr. Vice President, Me...   \n",
       "2  Mr. Speaker, Vice President Cheney, Members of...   \n",
       "\n",
       "                                      filename  \\\n",
       "0  data/SOTU-Analyzer-master/Speeches/2002.txt   \n",
       "1  data/SOTU-Analyzer-master/Speeches/2016.txt   \n",
       "2  data/SOTU-Analyzer-master/Speeches/2003.txt   \n",
       "\n",
       "                                          name  positivity    anger  \n",
       "0  data/SOTU-Analyzer-master/Speeches/2002.txt    0.298395  0.07932  \n",
       "1  data/SOTU-Analyzer-master/Speeches/2016.txt    0.274342  0.07500  \n",
       "2  data/SOTU-Analyzer-master/Speeches/2003.txt    0.258042  0.09514  "
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get your list of angry words\n",
    "angry_words = emolex_words[emolex_words.anger == 1].word\n",
    "\n",
    "# Only give me the columns of angry words\n",
    "sotu_df['anger'] = sotu_wordcount_df[angry_words].sum(axis=1)\n",
    "sotu_df.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc71f527",
   "metadata": {},
   "source": [
    "## Comparing SOTU vs Trump"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "4bdcc440",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='positivity', ylabel='anger'>"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = speeches_df.plot(x='positivity', y='anger', kind='scatter')\n",
    "sotu_df.plot(x='positivity', y='anger', kind='scatter', c='red', ax=ax)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0fc3304d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
